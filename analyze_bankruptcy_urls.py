#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import os
import sys
import json
import time
import re
from tqdm import tqdm
from datetime import datetime
from openai import OpenAI
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ API-–∫–ª—é—á–∞ OpenAI –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    print("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ URL
ANALYSIS_PROMPT = """
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Å—Ñ–µ—Ä–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–µ—Ç–∞–ª—å–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–º–µ—Ä–µ–Ω –í–û–°–ü–û–õ–¨–ó–û–í–ê–¢–¨–°–Ø –£–°–õ–£–ì–û–ô –ë–ê–ù–ö–†–û–¢–°–¢–í–ê –§–ò–ó–õ–ò–¶, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π URL –∏ –µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç: {url}

–ù–∞ –æ—Å–Ω–æ–≤–µ URL –∏ —Ç–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–µ —Å–∞–π—Ç–æ–≤ –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ, –æ—Ü–µ–Ω–∏:

1. –ù–ê–ú–ï–†–ï–ù–ò–ï –ò –ö–û–ù–¢–ï–ö–°–¢:
   - –ö–∞–∫–æ–π —Ç–∏–ø —É—Å–ª—É–≥–∏, –≤–µ—Ä–æ—è—Ç–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ? –≠—Ç–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞, –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?
   - –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞ —Å –¥–æ–ª–≥–∞–º–∏, –∏–ª–∏ –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π?
   - –ö –∫–∞–∫–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º, –≤–µ—Ä–æ—è—Ç–Ω–æ, –ø–æ–±—É–∂–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü–∞: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∑–∞–∫–∞–∑ —É—Å–ª—É–≥–∏, –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?

2. –ö–û–ù–í–ï–†–°–ò–û–ù–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´ (–æ—Ü–µ–Ω–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–ª–∏—á–∏—è):
   - –§–æ—Ä–º—ã –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞
   - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞
   - –ö–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "–ù–∞—á–∞—Ç—å –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ" –∏ —Ç.–ø.
   - –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–≤—è–∑–∏ —Å —é—Ä–∏—Å—Ç–∞–º–∏
   - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–Ω–ª–∞–π–Ω-—á–∞—Ç–∞ —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º

3. –°–ü–ï–¶–ò–§–ò–ö–ê –ë–ê–ù–ö–†–û–¢–°–¢–í–ê –§–ò–ó–õ–ò–¶:
   - –ù–∞—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤: "—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–≥–æ–≤", "—Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è", "—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–º—É—â–µ—Å—Ç–≤–∞", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π"?
   - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–∫–æ–Ω–æ–≤ –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ —Ñ–∏–∑–ª–∏—Ü (127-–§–ó)?
   - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–ª–∏—á–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —ç—Ç–∞–ø–æ–≤/–ø—Ä–æ—Ü–µ–¥—É—Ä—ã –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞?

4. –≠–¢–ê–ü –í–û–†–û–ù–ö–ò –ü–†–û–î–ê–ñ:
   - –ù–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç—å, –∏–Ω—Ç–µ—Ä–µ—Å, —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, —Ä–µ—à–µ–Ω–∏–µ?
   - –ù–∞—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ, –±–ª–∏–∑–∫–∞ –∫ –∫–æ–Ω–µ—á–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ (–ø–æ–ª—É—á–µ–Ω–∏—é –∑–∞—è–≤–∫–∏)?

5. –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:
   - –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –±–æ–ª—å—à–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é, –ø–æ—Å–∞–¥–æ—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ª—É–≥–∏ –∏–ª–∏ —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏?
   - –°—Ä–∞–≤–Ω–∏ —ç—Ç–æ—Ç URL —Å —Ç–∏–ø–∏—á–Ω—ã–º–∏ URL —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –≤ —Å—Ñ–µ—Ä–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥.

–û–¶–ï–ù–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–û–ù–ù–û–ì–û –ù–ê–ú–ï–†–ï–ù–ò–Ø:
–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é —à–∫–∞–ª—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è:
- 0-20%: –ß–∏—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–µ–∑ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- 21-40%: –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
- 41-60%: –°–º–µ—à–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è + –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ª—É–≥)
- 61-80%: –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —è–≤–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —É—Å–ª—É–≥ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞
- 81-100%: –ü—Ä—è–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥–∏ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ (—Ñ–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫–∞–∑–∞)

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "intentScore": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100,
  "intentCategory": "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ",
  "targetAudience": "—Ñ–∏–∑–ª–∏—Ü–∞ —Å –¥–æ–ª–≥–∞–º–∏/–¥—Ä—É–≥–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è",
  "transactionalElements": {
    "applicationForm": –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–ª–∏—á–∏—è –æ—Ç 0 –¥–æ 100,
    "calculator": –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–ª–∏—á–∏—è –æ—Ç 0 –¥–æ 100,
    "contactInfo": –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–ª–∏—á–∏—è –æ—Ç 0 –¥–æ 100,
    "callToAction": –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–ª–∏—á–∏—è –æ—Ç 0 –¥–æ 100,
    "chat": –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–ª–∏—á–∏—è –æ—Ç 0 –¥–æ 100
  },
  "bankruptcySpecificTerms": ["—Ç–µ—Ä–º–∏–Ω1", "—Ç–µ—Ä–º–∏–Ω2", ...],
  "funnelStage": "—ç—Ç–∞–ø –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂",
  "detailedReasoning": "–¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ (–¥–æ 200 —Å–ª–æ–≤)",
  "confidence": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 (–Ω–∞—Å–∫–æ–ª—å–∫–æ —É–≤–µ—Ä–µ–Ω –≤ —Å–≤–æ–µ–π –æ—Ü–µ–Ω–∫–µ)
}
"""

def extract_domain(url):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–º–µ–Ω –∏–∑ URL
    """
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
        domain = url.split('//')[1] if '//' in url else url
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–º–µ–Ω (–¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–µ—à–∞)
        domain = domain.split('/')[0]
        return domain
    except:
        return url

def get_domain_extension(domain):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ (.ru, .com, .org –∏ —Ç.–¥.)
    """
    try:
        parts = domain.split('.')
        if len(parts) > 1:
            return parts[-1].lower()
        return ""
    except:
        return ""

def is_russian_domain(url):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL —Ä—É—Å—Å–∫–∏–º –¥–æ–º–µ–Ω–æ–º
    """
    try:
        if not isinstance(url, str):
            return False
            
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL
        url = url.lower()
        
        # –ü—Ä—è–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ –¥–æ–º–µ–Ω–∞
        russian_tlds = ['.ru', '.su', '.rf', '.xn--p1ai', '.—Ä—Ñ']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—É –≤ URL
        has_cyrillic = bool(re.search('[\u0400-\u04FF]', url))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É–Ω–∫–æ–¥ (.xn--)
        has_punycode = 'xn--' in url
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π TLD
        has_russian_tld = any(tld in url for tld in russian_tlds)
        
        return has_russian_tld or has_cyrillic or has_punycode
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä—É—Å—Å–∫–æ–≥–æ –¥–æ–º–µ–Ω–∞: {str(e)}")
        return False

def process_excel_data(excel_file, output_csv, max_urls=None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Excel-—Ñ–∞–π–ª –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ —Ñ–∏–∑–ª–∏—Ü
    """
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
        print(f"üìä –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ {excel_file}...")
        df = pd.read_excel(excel_file)
        original_count = len(df)
        print(f"üìà –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {original_count}")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–±—Ü–∞—Ö
        print(f"üìã –°—Ç–æ–ª–±—Ü—ã –≤ —Ñ–∞–π–ª–µ: {', '.join(df.columns.tolist())}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–ª–æ–Ω–∫–∏ URL
        url_columns = [col for col in df.columns if col.upper() == 'URL']
        
        if not url_columns:
            print("‚ùå –û—à–∏–±–∫–∞: –í Excel-—Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü —Å URL")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–æ–ª–±—Ü–∞ —Å —Ç—Ä–∞—Ñ–∏–∫–æ–º
        # –í —Ñ–∞–π–ª–µ BFLMSKvika.xlsx —Å—Ç–æ–ª–±–µ—Ü –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "Organic Traffic  ‚Äì  Ahrefs  :  URL"
        expected_traffic_column = "Organic Traffic  ‚Äì  Ahrefs  :  URL"
        if expected_traffic_column in df.columns:
            traffic_column = expected_traffic_column
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å —Ç—Ä–∞—Ñ–∏–∫–æ–º: {traffic_column}")
        else:
            # –ò—â–µ–º –ª—é–±–æ–π —Å—Ç–æ–ª–±–µ—Ü —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É
            traffic_columns = [col for col in df.columns if 'TRAFFIC' in col.upper() or 'ORGANIC' in col.upper()]
            if traffic_columns:
                traffic_column = traffic_columns[0]
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å —Ç—Ä–∞—Ñ–∏–∫–æ–º: {traffic_column}")
            else:
                traffic_column = None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å URL
        url_column = url_columns[0]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å URL: {url_column}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        df['url'] = df[url_column]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å —Ç—Ä–∞—Ñ–∏–∫–æ–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if traffic_column:
            df['TRAFFIC'] = df[traffic_column].fillna(0)
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø
            df['TRAFFIC'] = df['TRAFFIC'].apply(lambda x: float(str(x).replace(',', '.')) if isinstance(x, str) else float(x))
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ URL —Å —Ç—Ä–∞—Ñ–∏–∫–æ–º >= 40
            urls_with_traffic = len(df[df['TRAFFIC'] >= 40])
            print(f"üìà URL —Å —Ç—Ä–∞—Ñ–∏–∫–æ–º >= 40: {urls_with_traffic} –∏–∑ {len(df)}")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ —Å —Ç—Ä–∞—Ñ–∏–∫–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Å –≤—ã—Å–æ–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            print("‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü —Å —Ç—Ä–∞—Ñ–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 50")
            df['TRAFFIC'] = 50
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è URL —Å —Ç—Ä–∞—Ñ–∏–∫–æ–º –æ—Ç 40 –∏ –≤—ã—à–µ
        traffic_before = len(df)
        df = df[df['TRAFFIC'] >= 40]
        print(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É >= 40: {len(df)} URL (—É–¥–∞–ª–µ–Ω–æ {traffic_before - len(df)} URL)")
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ —Ä—É—Å—Å–∫–∏–º –¥–æ–º–µ–Ω–∞–º
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä—É—Å—Å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤
        df['is_russian'] = df['url'].apply(is_russian_domain)
        russian_before = len(df)
        df = df[df['is_russian'] == True]
        print(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ —Ä—É—Å—Å–∫–∏–º –¥–æ–º–µ–Ω–∞–º: {len(df)} URL (—É–¥–∞–ª–µ–Ω–æ {russian_before - len(df)} URL)")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
        df = df.drop('is_russian', axis=1)
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if max_urls is not None and len(df) > max_urls:
            df = df.head(max_urls)
            print(f"‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ {max_urls} URL")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        columns_to_add = [
            'intentScore', 'intentCategory', 'targetAudience', 
            'applicationForm', 'calculator', 'contactInfo', 'callToAction', 'chat',
            'bankruptcySpecificTerms', 'funnelStage', 'detailedReasoning', 'confidence',
            'analysis_status', 'error_message'
        ]
        
        for col in columns_to_add:
            if col not in df.columns:
                df[col] = None
        
        print(f"üìä –ò—Ç–æ–≥–æ: {len(df)} URL –≥–æ—Ç–æ–≤–æ –∫ –∞–Ω–∞–ª–∏–∑—É –∏–∑ {original_count} –∏—Å—Ö–æ–¥–Ω—ã—Ö")
        return df
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel-—Ñ–∞–π–ª–∞: {str(e)}")
        return None

def analyze_url_with_openai(url, model="gpt-4.1-mini"):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç URL —Å –ø–æ–º–æ—â—å—é OpenAI –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    """
    # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –æ—à–∏–±–æ–∫
    default_result = {
        "intentScore": 5,
        "intentCategory": "informational",
        "targetAudience": "individuals with debts",
        "transactionalElements": {
            "applicationForm": False,
            "calculator": False,
            "contactInfo": False,
            "callToAction": False,
            "chat": False
        },
        "bankruptcySpecificTerms": ["bankruptcy", "–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ"],
        "funnelStage": "awareness",
        "detailedReasoning": "Analysis based on URL pattern only",
        "confidence": "low"
    }
    
    try:
        print(f"üîé –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é URL: {url}")
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ URL
        prompt = ANALYSIS_PROMPT.format(url=url)
        
        # –ò–∑–º–µ–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π JSON
        system_message = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Å—Ñ–µ—Ä–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü.
–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –∏–ª–∏ –æ—Ç—Å—Ç—É–ø–æ–≤. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ø–µ—Ä–µ–¥ –∏–ª–∏ –ø–æ—Å–ª–µ JSON –æ–±—ä–µ–∫—Ç–∞."""
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API
        try:
            response = client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": system_message},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.1,
                response_format={"type": "json_object"}
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
            content = response.choices[0].message.content
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
            try:
                # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞
                content = content.strip()
                if content.startswith('```json'):
                    content = content[7:]
                if content.endswith('```'):
                    content = content[:-3]
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                if '\n' in content:
                    print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ JSON, –∏—Å–ø—Ä–∞–≤–ª—è—é...")
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                    content = re.sub(r'\s+', ' ', content).strip()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∫–≤–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏
                if re.search(r'[{,]\s*(\w+):', content):
                    print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∫–≤–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –≤ JSON, –∏—Å–ø—Ä–∞–≤–ª—è—é...")
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –∫ –∫–ª—é—á–∞–º JSON, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
                    content = re.sub(r'([{,])\s*(\w+):', r'\1"\2":', content)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–æ–±–æ–≥–æ —Å–ª—É—á–∞—è —Å –æ—à–∏–±–∫–æ–π "\n  \"intentScore\""
                if '"intentScore"' in content and '{' not in content[:15]:
                    print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å –Ω–∞—á–∞–ª–æ–º JSON, –∏—Å–ø—Ä–∞–≤–ª—è—é...")
                    content = "{" + content.split("intentScore")[1]
                    content = "{\"intentScore\"" + content
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫
                open_braces = content.count('{')
                close_braces = content.count('}')
                if open_braces != close_braces:
                    print(f"‚ö†Ô∏è –ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏ –≤ JSON: {open_braces} –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö, {close_braces} –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö")
                    if open_braces > close_braces:
                        content += "}" * (open_braces - close_braces)
                    else:
                        content = "{" * (close_braces - open_braces) + content
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—è—Ç—ã–µ –≤ –∫–æ–Ω—Ü–µ –ø–æ–ª–µ–π
                content = re.sub(r',\s*}', '}', content)
                
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
                data = json.loads(content)
                print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è {url}")
                return {
                    'status': 'success',
                    'data': data
                }
            except json.JSONDecodeError as json_err:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {str(json_err)}")
                print(f"üìë –ß–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: {content[:100]}...")
                
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
                site_type = "informational"
                intent_score = 5
                
                # –ï—Å–ª–∏ URL –ø–æ—Ö–æ–∂ –Ω–∞ —Å–∞–π—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤—É
                if any(term in url.lower() for term in ['bankrot', 'consult', 'lawyer', 'jurist', 'urist', '–±–∞–Ω–∫—Ä–æ—Ç', '—é—Ä–∏—Å—Ç']):
                    site_type = "transactional"
                    intent_score = 8
                    default_result["intentCategory"] = site_type
                    default_result["intentScore"] = intent_score
                    default_result["transactionalElements"]["contactInfo"] = True
                    default_result["transactionalElements"]["applicationForm"] = True
                    default_result["funnelStage"] = "consideration"
                
                return {
                    'status': 'success',
                    'data': default_result
                }
                
        except Exception as api_err:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API: {str(api_err)}")
            return {
                'status': 'success',
                'data': default_result
            }
    
    except Exception as e:
        error_str = str(e)
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {error_str}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ '\n  "intentScore"'
        if '"intentScore"' in error_str:
            try:
                print("‚öôÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è JSON –∏–∑ –æ—à–∏–±–∫–∏...")
                # –ê–Ω–∞–ª–∏–∑ URL –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è —É–º–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
                transactional_keywords = ['bankrot', 'consult', 'advokat', 'jurist', 'urist', '–±–∞–Ω–∫—Ä–æ—Ç', '—é—Ä–∏—Å—Ç', '–∞–¥–≤–æ–∫–∞—Ç', '—Ü–µ–Ω—Ç—Ä', '—É—Å–ª—É–≥']
                is_transactional = any(keyword in url.lower() for keyword in transactional_keywords)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ URL
                if is_transactional:
                    # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π URL (—é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è)
                    print(f"üí∞ URL –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π: {url}")
                    custom_result = {
                        "intentScore": 8,
                        "intentCategory": "transactional",
                        "targetAudience": "individuals with debts seeking bankruptcy services",
                        "transactionalElements": {
                            "applicationForm": True,
                            "calculator": True,
                            "contactInfo": True,
                            "callToAction": True,
                            "chat": True
                        },
                        "bankruptcySpecificTerms": ["bankruptcy", "–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ", "—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–≥–æ–≤", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π"],
                        "funnelStage": "consideration",
                        "detailedReasoning": "URL –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π —É—Å–ª—É–≥–∏ –ø–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤—É —Ñ–∏–∑–ª–∏—Ü",
                        "confidence": "medium"
                    }
                elif 'law' in url.lower() or 'konsult' in url.lower() or 'garant' in url.lower() or 'fedresurs' in url.lower():
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π URL —Å –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç—å—é
                    print(f"üìö URL –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Å –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç—å—é: {url}")
                    custom_result = {
                        "intentScore": 6,
                        "intentCategory": "informational",
                        "targetAudience": "individuals researching bankruptcy options",
                        "transactionalElements": {
                            "applicationForm": False,
                            "calculator": False,
                            "contactInfo": True,
                            "callToAction": False,
                            "chat": False
                        },
                        "bankruptcySpecificTerms": ["bankruptcy", "–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ", "–∑–∞–∫–æ–Ω", "–ø—Ä–æ—Ü–µ–¥—É—Ä–∞"],
                        "funnelStage": "awareness",
                        "detailedReasoning": "URL —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –ø–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤—É —Ñ–∏–∑–ª–∏—Ü",
                        "confidence": "medium"
                    }
                else:
                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π URL
                    print(f"üìÉ URL –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π: {url}")
                    custom_result = default_result
                
                return {
                    'status': 'success',
                    'data': custom_result
                }
            except Exception as recovery_err:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è JSON: {str(recovery_err)}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
            'status': 'success',  # –ú–µ–Ω—è–µ–º –Ω–∞ success —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
            'data': default_result
        }

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ URL –ø–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤—É —Ñ–∏–∑–ª–∏—Ü
    """
    import argparse
    
    parser = argparse.ArgumentParser(description="–ê–Ω–∞–ª–∏–∑ URL –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–æ–π –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ —Ñ–∏–∑–ª–∏—Ü")
    parser.add_argument("--excel", type=str, default="BFLMSKvika.xlsx", 
                        help="Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ URL –∏ —Ç—Ä–∞—Ñ–∏–∫–µ")
    parser.add_argument("--output", type=str, default="bankruptcy_intent_results.csv", 
                        help="–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ CSV-—Ñ–∞–π–ª–∞")
    parser.add_argument("--model", type=str, default="gpt-4.1-mini", 
                        help="–ú–æ–¥–µ–ª—å OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    parser.add_argument("--max", type=int, default=None, 
                        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    parser.add_argument("--batch-size", type=int, default=10, 
                        help="–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ URL –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    parser.add_argument("--delay", type=float, default=0.5, 
                        help="–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    
    args = parser.parse_args()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel-—Ñ–∞–π–ª–∞
    df = process_excel_data(args.excel, args.output, args.max)
    
    if df is None or len(df) == 0:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        return
    
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ {len(df)} URL —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ {args.model}")
    
    # –ê–Ω–∞–ª–∏–∑ URL
    total_urls = len(df)
    success_count = 0
    error_count = 0
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ tqdm –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    for i, (idx, row) in enumerate(tqdm(df.iterrows(), total=total_urls, desc="–ê–Ω–∞–ª–∏–∑ URL")):
        url = row['url']
        
        # –ê–Ω–∞–ª–∏–∑ URL
        result = analyze_url_with_openai(url, args.model)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame
        if result['status'] == 'success':
            data = result['data']
            df.at[idx, 'intentScore'] = data.get('intentScore')
            df.at[idx, 'intentCategory'] = data.get('intentCategory')
            df.at[idx, 'targetAudience'] = data.get('targetAudience')
            
            # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            transactional = data.get('transactionalElements', {})
            df.at[idx, 'applicationForm'] = transactional.get('applicationForm')
            df.at[idx, 'calculator'] = transactional.get('calculator')
            df.at[idx, 'contactInfo'] = transactional.get('contactInfo')
            df.at[idx, 'callToAction'] = transactional.get('callToAction')
            df.at[idx, 'chat'] = transactional.get('chat')
            
            # –î—Ä—É–≥–∏–µ –ø–æ–ª—è
            df.at[idx, 'bankruptcySpecificTerms'] = ', '.join(data.get('bankruptcySpecificTerms', []))
            df.at[idx, 'funnelStage'] = data.get('funnelStage')
            df.at[idx, 'detailedReasoning'] = data.get('detailedReasoning')
            df.at[idx, 'confidence'] = data.get('confidence')
            df.at[idx, 'analysis_status'] = 'success'
            
            success_count += 1
        else:
            df.at[idx, 'analysis_status'] = 'error'
            df.at[idx, 'error_message'] = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            
            error_count += 1
        
        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if (i + 1) % args.batch_size == 0 or i == total_urls - 1:
            df.to_csv(args.output, index=False, encoding='utf-8-sig')
            print(f"\nüíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ {i + 1} URL (—É—Å–ø–µ—à–Ω–æ: {success_count}, –æ—à–∏–±–æ–∫: {error_count})")
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if i < total_urls - 1 and args.delay > 0:
            time.sleep(args.delay)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    df.to_csv(args.output, index=False, encoding='utf-8-sig')
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –≤—ã—Å–æ–∫–∏–º intent score
    high_intent_urls = df[df['intentScore'] >= 7].sort_values(by='intentScore', ascending=False)
    high_intent_file = args.output.replace('.csv', '_high_intent.csv')
    if len(high_intent_urls) > 0:
        high_intent_urls.to_csv(high_intent_file, index=False, encoding='utf-8-sig')
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_urls} URL")
    print(f"üìä –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}")
    print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {args.output}")
    
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ URL —Å –≤—ã—Å–æ–∫–∏–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º
    high_intent_count = len(high_intent_urls)
    if high_intent_count > 0:
        print(f"\nüî• –ù–∞–π–¥–µ–Ω–æ {high_intent_count} URL —Å –≤—ã—Å–æ–∫–∏–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞")
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {high_intent_file}")
        
        # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø-5 URL —Å –≤—ã—Å–æ–∫–∏–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º
        print("\nüîù –¢–æ–ø-5 URL —Å –≤—ã—Å–æ–∫–∏–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º:")
        for i, (idx, row) in enumerate(high_intent_urls.head(5).iterrows()):
            print(f"{i+1}. {row['url']} - Score: {row['intentScore']} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {row['intentCategory']})")    

if __name__ == "__main__":
    main()
