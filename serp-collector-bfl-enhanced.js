/**
 * @file serp-collector-bfl-enhanced.js
 * @description –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤—É —Ñ–∏–∑–ª–∏—Ü —á–µ—Ä–µ–∑ API XMLRiver
 */

require('dotenv').config();
const { XmlRiverApi } = require('./src/xmlriver-api');
// –ò—Å–ø–æ–ª—å–∑—É–µ–º Promises –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
const fs = require('fs-extra');
const path = require('path');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
const TEST_QUERIES = [
  '–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü',
  '–∑–∞–∫–æ–Ω –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ',
  '—Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞',
  '–∫–∞–∫ —Å—Ç–∞—Ç—å –±–∞–Ω–∫—Ä–æ—Ç–æ–º',
  '–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞',
  '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞',
  '–ú–§–¶ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ',
  '—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–≥–æ–≤ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ',
  '–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ 127 —Ñ–∑',
  '–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —á–µ—Ä–µ–∑ —Å—É–¥'
];

// –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ú–æ—Å–∫–≤—ã –∏ –ú–û
const CITIES = [
  // –ú–æ—Å–∫–≤–∞
  { name: '–ú–æ—Å–∫–≤–∞', code: 213 },
  
  // –ì–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
  { name: '–ë–∞–ª–∞—à–∏—Ö–∞', code: 10716 },
  { name: '–•–∏–º–∫–∏', code: 10720 },
  { name: '–ü–æ–¥–æ–ª—å—Å–∫', code: 10741 },
  { name: '–ö–æ—Ä–æ–ª—ë–≤', code: 10738 },
  { name: '–ú—ã—Ç–∏—â–∏', code: 10739 },
  { name: '–õ—é–±–µ—Ä—Ü—ã', code: 10740 },
  { name: '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫', code: 10742 },
  { name: '–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å', code: 10768 },
  { name: '–ö–æ–ª–æ–º–Ω–∞', code: 10746 }
];

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–æ–≤
const MAX_CONCURRENT = 7; // –°–Ω–∏–∂–µ–Ω–æ —Å 10 –¥–æ 7 –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
class TaskQueue {
  constructor(concurrency) {
    this.concurrency = concurrency;
    this.running = 0;
    this.queue = [];
  }

  // –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
  add(task) {
    return new Promise((resolve, reject) => {
      this.queue.push({ task, resolve, reject });
      this.next();
    });
  }

  // –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
  next() {
    if (this.running >= this.concurrency || this.queue.length === 0) {
      return;
    }

    const { task, resolve, reject } = this.queue.shift();
    this.running++;

    Promise.resolve(task())
      .then((result) => {
        this.running--;
        resolve(result);
        this.next();
      })
      .catch((error) => {
        this.running--;
        reject(error);
        this.next();
      });
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
const api = new XmlRiverApi({
  userId: process.env.XMLRIVER_USER_ID,
  apiKey: process.env.XMLRIVER_API_KEY
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
function loadKeywords() {
  const keywordsPath = path.join(__dirname, 'keywords_bfl.txt');
  
  if (fs.existsSync(keywordsPath)) {
    console.log(`üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: ${keywordsPath}`);
    const content = fs.readFileSync(keywordsPath, 'utf8');
    
    const keywords = content
      .split('\n')
      .map(line => line.trim())
      .filter(line => line && !line.startsWith('#'));
      
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${keywords.length} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤`);
    return keywords;
  }
  
  console.log('‚ö†Ô∏è –§–∞–π–ª —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫');
  return TEST_QUERIES;
}

// –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function collectDataForQuery(query, cityName, cityCode, maxRetries = 3, delayMs = 2000) {
  const startTime = Date.now();
  console.log(`üîç [${cityName}] –ó–∞–ø—Ä–æ—Å: "${query}"`);
  
  // –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
  const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
  async function fetchWithRetry(fetchFunc, retryCount = 0) {
    try {
      return await fetchFunc();
    } catch (error) {
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      if (retryCount < maxRetries) {
        console.log(`‚ö†Ô∏è [${cityName}] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${maxRetries} –¥–ª—è "${query}": ${error.message}`);
        await delay(delayMs); // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        return fetchWithRetry(fetchFunc, retryCount + 1);
      }
      
      // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
      throw error;
    }
  }
  
  try {
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    let result = {
      query,
      city: cityName,
      yandex: null,
      google: null,
      timestamp: new Date().toISOString()
    };

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    try {
      console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è "${query}" –≤ ${cityName} (YANDEX)`);
      const yandexResults = await fetchWithRetry(() => api.searchYandex(query, {
        page: 0,
        groupby: 10,
        loc: cityCode,
        within: 2, // –ó–∞ –º–µ—Å—è—Ü
        filter: 1
      }));
      
      const yandexCount = yandexResults && yandexResults.results ? yandexResults.results.length : 0;
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${yandexCount} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ YANDEX`);
      
      result.yandex = {
        uniqueResults: yandexResults.results || [],
        totalResults: yandexCount,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ø–Ω–¥–µ–∫—Å–∞: ${error.message}`);
      result.yandex = {
        error: error.message,
        timestamp: new Date().toISOString()
      };
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await delay(1000);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    try {
      console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è "${query}" –≤ ${cityName} (GOOGLE)`);
      const googleResults = await fetchWithRetry(() => api.searchGoogle(query, {
        num: 100, // –î–æ 100 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        gl: 'ru',
        hl: 'ru'
      }));
      
      const googleCount = googleResults && googleResults.results ? googleResults.results.length : 0;
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${googleCount} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ GOOGLE`);
      
      result.google = {
        uniqueResults: googleResults.results || [],
        totalResults: googleCount,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Google: ${error.message}`);
      result.google = {
        error: error.message,
        timestamp: new Date().toISOString()
      };
    }
    
    const elapsedTime = ((Date.now() - startTime) / 1000).toFixed(2);
    console.log(`‚úÖ [${cityName}] "${query}" - –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${elapsedTime} —Å–µ–∫.`);
    
    return result;
  } catch (error) {
    const elapsedTime = ((Date.now() - startTime) / 1000).toFixed(2);
    console.error(`‚ùå [${cityName}] –û—à–∏–±–∫–∞ –¥–ª—è "${query}" –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫: ${error.message}`);
    return { 
      query, 
      cityName, 
      error: error.message,
      elapsedTime: parseFloat(elapsedTime),
      success: false
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
const RESULTS_DIR = path.join(__dirname, 'data', 'results', 'bfl');
const INTERMEDIATE_DIR = path.join(RESULTS_DIR, 'intermediate');
const PROGRESS_FILE = path.join(RESULTS_DIR, 'progress.json');

// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
function saveResults(data, fileName, isIntermediate = false) {
  try {
    const targetDir = isIntermediate ? INTERMEDIATE_DIR : RESULTS_DIR;
    fs.ensureDirSync(targetDir);
    
    const filePath = path.join(targetDir, `${fileName}.json`);
    fs.writeJsonSync(filePath, data, { spaces: 2 });
    console.log(`üíæ ${isIntermediate ? '–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ' : '–ò—Ç–æ–≥–æ–≤—ã–µ'} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${filePath}`);
    
    return filePath;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${error.message}`);
    return null;
  }
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
function saveProgress(progress) {
  try {
    fs.ensureDirSync(RESULTS_DIR);
    fs.writeJsonSync(PROGRESS_FILE, progress, { spaces: 2 });
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${error.message}`);
    return false;
  }
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
function loadProgress() {
  try {
    if (fs.existsSync(PROGRESS_FILE)) {
      console.log(`üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ ${PROGRESS_FILE}`);
      return fs.readJsonSync(PROGRESS_FILE);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${error.message}`);
  }
  
  return {
    completedTasks: [],
    lastResults: null
  };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
function isTaskCompleted(progress, keyword, cityName) {
  return progress.completedTasks.some(task => 
    task.keyword === keyword && task.cityName === cityName
  );
}

// –°–æ–∑–¥–∞–µ—Ç CSV-–æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
function createCsvReport(results, fileName) {
  try {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ CSV –æ—Ç—á–µ—Ç–∞...');
    fs.ensureDirSync(RESULTS_DIR);
    
    const filePath = path.join(RESULTS_DIR, `${fileName}.csv`);
    
    // CSV –∑–∞–≥–æ–ª–æ–≤–æ–∫
    // –î–æ–±–∞–≤–ª—è–µ–º BOM –º–∞—Ä–∫–µ—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    let csvContent = '\ufeff' + 'keyword,city,engine,position,title,url,snippet\n';
    
    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞
    Object.keys(results.citiesData).forEach(cityName => {
      const cityData = results.citiesData[cityName];
      
      // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞
      Object.keys(cityData.keywords).forEach(keyword => {
        const keywordData = cityData.keywords[keyword];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Yandex
        if (keywordData.yandex && keywordData.yandex.results) {
          keywordData.yandex.results.forEach((result, index) => {
            // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –∑–∞–ø—è—Ç—ã–µ –≤ –ø–æ–ª—è—Ö
            const escapedTitle = result.title ? `"${result.title.replace(/"/g, '""')}"` : '';
            const escapedSnippet = result.snippet ? `"${result.snippet.replace(/"/g, '""')}"` : '';
            
            csvContent += `"${keyword}","${cityName}","YANDEX",${index + 1},"–†–µ–∑—É–ª—å—Ç–∞—Ç #${index + 1}","${result.url}",${escapedSnippet}\n`;
          });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google
        if (keywordData.google && keywordData.google.results) {
          keywordData.google.results.forEach((result, index) => {
            // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –∑–∞–ø—è—Ç—ã–µ –≤ –ø–æ–ª—è—Ö
            const escapedTitle = result.title ? `"${result.title.replace(/"/g, '""')}"` : '';
            const escapedSnippet = result.snippet ? `"${result.snippet.replace(/"/g, '""')}"` : '';
            
            csvContent += `"${keyword}","${cityName}","GOOGLE",${index + 1},"–†–µ–∑—É–ª—å—Ç–∞—Ç #${index + 1}","${result.url}",${escapedSnippet}\n`;
          });
        }
      });
    });
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8
    fs.writeFileSync(filePath, csvContent, { encoding: 'utf8' });
    
    console.log(`üìù CSV-–æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${filePath}`);
    
    return filePath;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV-–æ—Ç—á–µ—Ç–∞: ${error.message}`);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤—É —Ñ–∏–∑–ª–∏—Ü —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  fs.ensureDirSync(RESULTS_DIR);
  fs.ensureDirSync(INTERMEDIATE_DIR);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞
  const keywords = loadKeywords();
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
  const progress = loadProgress();
  console.log(`üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å: ${progress.completedTasks.length} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á`);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  let allResults = progress.lastResults;
  
  // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  if (!allResults) {
    allResults = {
      startTime: new Date().toISOString(),
      keywords: keywords,
      totalKeywords: keywords.length,
      totalCities: CITIES.length,
      citiesData: {}
    };
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤
    CITIES.forEach(city => {
      allResults.citiesData[city.name] = {
        code: city.code,
        keywords: {},
        startTime: new Date().toISOString()
      };
    });
  }
  
  // –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
  const taskQueue = new TaskQueue(MAX_CONCURRENT);
  
  // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –∏ —Å—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
  const totalTasks = keywords.length * CITIES.length;
  let completedTasks = progress.completedTasks.length;
  const startTime = Date.now();
  
  console.log(`üìà –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${keywords.length} –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ –∏ ${CITIES.length} –≥–æ—Ä–æ–¥–æ–≤`);
  console.log(`‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—Ä–∞: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á: ${MAX_CONCURRENT}`);
  console.log(`üîÑ –£–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedTasks}/${totalTasks} –∑–∞–¥–∞—á (${((completedTasks / totalTasks) * 100).toFixed(1)}%)`);
  
  
  // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∏ –∑–∞–ø—Ä–æ—Å—ã
  const promises = [];
  let tasksCount = 0;
  
  for (const city of CITIES) {
    for (const keyword of keywords) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —ç—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
      if (!isTaskCompleted(progress, keyword, city.name)) {
        tasksCount++;
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ –æ—á–µ—Ä–µ–¥—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
        promises.push(taskQueue.add(() => {
          return collectDataForQuery(keyword, city.name, city.code)
            .then(result => {
              completedTasks++;
              
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
              if (!allResults.citiesData[city.name].keywords[keyword]) {
                allResults.citiesData[city.name].keywords[keyword] = {
                  yandex: result.yandex,
                  google: result.google,
                  timestamp: new Date().toISOString()
                };
              }
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞
              allResults.citiesData[city.name].endTime = new Date().toISOString();
              
              // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
              progress.completedTasks.push({
                keyword,
                cityName: city.name,
                timestamp: new Date().toISOString()
              });
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
              progress.lastResults = allResults;
              
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
              saveProgress(progress);
              
              // –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –æ—Ü–µ–Ω–∫–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
              const percent = ((completedTasks / totalTasks) * 100).toFixed(1);
              const elapsedSeconds = Math.round((Date.now() - startTime) / 1000);
              const averageTimePerTask = elapsedSeconds / completedTasks;
              const remainingTasks = totalTasks - completedTasks;
              const remainingSeconds = Math.round(averageTimePerTask * remainingTasks);
              const remainingMinutes = Math.floor(remainingSeconds / 60);
              const remainingSecondsDisplay = remainingSeconds % 60;
              
              console.log(`‚è±Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å: ${percent}% (${completedTasks}/${totalTasks}), –û—Å—Ç–∞–ª–æ—Å—å: ${remainingMinutes}–º ${remainingSecondsDisplay}—Å, –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: ${taskQueue.running}/${MAX_CONCURRENT}`);
              
              // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π 5-–π –∑–∞–¥–∞—á–∏
              if (completedTasks % 5 === 0) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
                allResults.endTime = new Date().toISOString();
                const intermediateFileName = 'intermediate_results';
                saveResults(allResults, intermediateFileName, true);
              }
              
              return result;
            });
        }));
      } else {
        console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${keyword} –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${city.name} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
      }
    }
  }
  
  // –î–æ–∂–∏–¥–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
  console.log('‚åõ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á...');
  
  try {
    await Promise.all(promises);
    const totalSeconds = Math.round((Date.now() - startTime) / 1000);
    const minutes = Math.floor(totalSeconds / 60);
    const seconds = totalSeconds % 60;
    console.log(`üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –ó–∞—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: ${minutes}–º ${seconds}—Å`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    allResults.endTime = new Date().toISOString();
    allResults.totalDuration = `${minutes}–º ${seconds}—Å`;
    allResults.durationSeconds = totalSeconds;
    allResults.statistics = {
      totalTasks,
      completedTasks,
      successRate: `${((completedTasks / totalTasks) * 100).toFixed(1)}%`
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const timestamp = new Date().toISOString().replace(/:/g, '-').replace(/\./g, '-').substring(0, 19);
    const fileName = `bfl_results_${timestamp}`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Å –ø–æ–ª–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    const jsonFilePath = saveResults(allResults, fileName);
    
    // –°–æ–∑–¥–∞–µ–º CSV –æ—Ç—á–µ—Ç
    const csvFilePath = createCsvReport(allResults, fileName);
    
    console.log(`üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!`); 
    console.log(`üíæ JSON: ${jsonFilePath}`); 
    console.log(`üìù CSV: ${csvFilePath}`); 
    console.log(`
‚ú® –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:`);
    console.log(`   üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${totalTasks}`);
    console.log(`   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedTasks}`);
    console.log(`   üí∏ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((completedTasks / totalTasks) * 100).toFixed(1)}%`);
    console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${minutes}–º ${seconds}—Å`);
    
    // –ï—Å–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if (completedTasks >= totalTasks) {
      try {
        if (fs.existsSync(PROGRESS_FILE)) {
          fs.removeSync(PROGRESS_FILE);
          console.log(`üóëÔ∏è –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω, –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${error.message}`);
      }
    }
  } catch (error) {
    console.error(`üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á: ${error.message}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —á–∞—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ
      if (progress && progress.completedTasks) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        progress.lastResults = allResults;
        saveProgress(progress);
        console.log(`üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ${progress.completedTasks.length} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∑–∂–µ.`);
      }
      
      allResults.error = error.message;
      allResults.endTime = new Date().toISOString();
      
      const timestamp = new Date().toISOString().replace(/:/g, '-').replace(/\./g, '-').substring(0, 19);
      const fileName = `bfl_results_error_${timestamp}`;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
      const jsonFilePath = saveResults(allResults, fileName);
      console.log(`üíæ –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${jsonFilePath}`);
    } catch (saveError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${saveError.message}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(err => {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:`, err);
});
