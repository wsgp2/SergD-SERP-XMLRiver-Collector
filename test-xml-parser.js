/**
 * @file test-xml-parser.js
 * @description –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML –æ—Ç–≤–µ—Ç–∞ –æ—Ç XML River API
 */

require('dotenv').config();
const fs = require('fs-extra');
const path = require('path');
const axios = require('axios');
const xml2js = require('xml2js');
const { promisify } = require('util');
const parseXml = promisify(xml2js.parseString);

// –ë–∞–∑–æ–≤—ã–µ URL –¥–ª—è API
const API_BASE_URL = {
  GOOGLE: 'http://xmlriver.com/search/xml',
  YANDEX: 'http://xmlriver.com/search_yandex/xml'
};

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ XML River API –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–≤–µ—Ç–∞
 * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {string} engine - –ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ (GOOGLE –∏–ª–∏ YANDEX)
 * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
 */
async function testSearch(query, engine, options = {}) {
  try {
    console.log(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${engine} –∑–∞–ø—Ä–æ—Å–∞: "${query}"`);
    console.log(`üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${JSON.stringify(options)}`);
    
    const baseUrl = engine === 'GOOGLE' ? API_BASE_URL.GOOGLE : API_BASE_URL.YANDEX;
    const safeQuery = encodeURIComponent(query);
    
    // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const params = {
      user: process.env.XMLRIVER_USER_ID,
      key: process.env.XMLRIVER_API_KEY,
      query: safeQuery,
      ...options
    };
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∑–∞–ø—Ä–æ—Å–∞
    const queryString = Object.entries(params)
      .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)
      .join('&');
    
    const requestUrl = `${baseUrl}?${queryString}`;
    console.log(`üåê URL –∑–∞–ø—Ä–æ—Å–∞: ${requestUrl}`);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await axios.get(requestUrl, { timeout: 60000 });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if (response.status !== 200) {
      throw new Error(`–û—à–∏–±–∫–∞ HTTP ${response.status}: ${response.statusText}`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const rawFilePath = path.join(__dirname, 'data', 'debug', `raw_${engine.toLowerCase()}_${new Date().toISOString().replace(/:/g, '-')}.xml`);
    fs.ensureDirSync(path.dirname(rawFilePath));
    fs.writeFileSync(rawFilePath, response.data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
    if (typeof response.data === 'string' && response.data.includes('<error')) {
      const errorMatch = response.data.match(/<error code="([^"]+)">([^<]+)<\/error>/);
      if (errorMatch) {
        throw new Error(`–û—à–∏–±–∫–∞ API ${errorMatch[1]}: ${errorMatch[2]}`);
      }
    }
    
    // –ü–∞—Ä—Å–∏–º XML –æ—Ç–≤–µ—Ç
    const parsedXml = await parseXml(response.data);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    console.log('\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ XML –æ—Ç–≤–µ—Ç–∞:');
    if (!parsedXml || !parsedXml.yandexsearch || !parsedXml.yandexsearch.response) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ API');
      return;
    }
    
    const xmlResponse = parsedXml.yandexsearch.response[0];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏
    if (xmlResponse.error) {
      const errorCode = xmlResponse.error[0].$.code;
      const errorText = xmlResponse.error[0]._;
      console.log(`‚ùå –û—à–∏–±–∫–∞ API ${errorCode}: ${errorText}`);
      return;
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    if (xmlResponse.found && xmlResponse.found.length > 0) {
      console.log(`üìà –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${xmlResponse.found[0]._} (priority: ${xmlResponse.found[0].$.priority})`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (!xmlResponse.results || !xmlResponse.results[0] || !xmlResponse.results[0].grouping) {
      console.log('‚ùå –ë–ª–æ–∫ results.grouping –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ');
      return; 
    }
    
    const grouping = xmlResponse.results[0].grouping[0];
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if (grouping.page && grouping.page.length > 0) {
      const page = grouping.page[0];
      console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${page._} (–ü–æ–∑–∏—Ü–∏–∏: ${page.$.first} - ${page.$.last})`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥—Ä—É–ø–ø –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if (!grouping.group || grouping.group.length === 0) {
      console.log('‚ùå –ì—Ä—É–ø–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ');
      console.log('üìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:', JSON.stringify(xmlResponse, null, 2));
      return;
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const resultsCount = grouping.group.length;
    console.log(`üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –≤ –æ—Ç–≤–µ—Ç–µ: ${resultsCount}`);
    
    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    for (let i = 0; i < Math.min(2, resultsCount); i++) {
      const group = grouping.group[i];
      if (group && group.doc && group.doc.length > 0) {
        const doc = group.doc[0];
        
        console.log(`\nüìë –î–æ–∫—É–º–µ–Ω—Ç #${i + 1}:`);
        if (doc.url && doc.url.length > 0) console.log(`   üîó URL: ${doc.url[0]}`);
        if (doc.title && doc.title.length > 0) console.log(`   üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${doc.title[0]}`);
        
        if (doc.passages && doc.passages.length > 0 && 
            doc.passages[0].passage && doc.passages[0].passage.length > 0) {
          console.log(`   üìù –°–Ω–∏–ø–ø–µ—Ç: ${doc.passages[0].passage[0]}`);
        }
      } else {
        console.log(`‚ùå –î–æ–∫—É–º–µ–Ω—Ç #${i + 1} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö`);
      }
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    const allResults = extractResults(parsedXml, engine);
    console.log(`\nüìä –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${allResults.length}`);
    
    // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    if (allResults.length > 0) {
      for (let i = 0; i < Math.min(2, allResults.length); i++) {
        console.log(`\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç #${i + 1}:`);
        console.log(`   URL: ${allResults[i].url}`);
        console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${allResults[i].title}`);
      }
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    if (error.stack) console.error(error.stack);
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ XML –æ—Ç–≤–µ—Ç–∞
 * @param {Object} parsedXml - –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π XML –æ—Ç–≤–µ—Ç
 * @param {string} engine - –ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ (GOOGLE –∏–ª–∏ YANDEX)
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
 */
function extractResults(parsedXml, engine) {
  const results = [];
  
  try {
    if (!parsedXml || !parsedXml.yandexsearch || !parsedXml.yandexsearch.response) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ API');
      return results;
    }
    
    const xmlResponse = parsedXml.yandexsearch.response[0];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏
    if (xmlResponse.error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ API: ${xmlResponse.error[0]._}`);
      return results;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (!xmlResponse.results || !xmlResponse.results[0] || !xmlResponse.results[0].grouping) {
      console.error('‚ùå –ë–ª–æ–∫ results.grouping –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ');
      return results;
    }
    
    const grouping = xmlResponse.results[0].grouping[0];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥—Ä—É–ø–ø –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if (!grouping.group || grouping.group.length === 0) {
      console.error('‚ùå –ì—Ä—É–ø–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ');
      return results;
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
    grouping.group.forEach((group, index) => {
      if (group && group.doc && group.doc.length > 0) {
        const doc = group.doc[0];
        
        let url = '';
        let title = '';
        let snippet = '';
        
        if (doc.url && doc.url.length > 0) url = doc.url[0];
        if (doc.title && doc.title.length > 0) title = doc.title[0];
        
        if (doc.passages && doc.passages.length > 0 && 
            doc.passages[0].passage && doc.passages[0].passage.length > 0) {
          snippet = doc.passages[0].passage[0];
        }
        
        if (url) {
          results.push({
            url,
            title,
            snippet,
            position: index + 1,
            engine
          });
        }
      }
    });
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${error.message}`);
  }
  
  return results;
}

// –¢–µ—Å—Ç—ã –¥–ª—è –Ø–Ω–¥–µ–∫—Å–∞ –∏ Google
async function runTests() {
  // –ó–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const query = '–∫—Ä–µ–¥–∏—Ç –¥–ª—è –±–∏–∑–Ω–µ—Å–∞';
  
  // –¢–µ—Å—Ç –Ø–Ω–¥–µ–∫—Å–∞
  await testSearch(query, 'YANDEX', {
    groupby: 10,
    page: 0,  // –ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –Ø–Ω–¥–µ–∫—Å–µ —Å 0
    filter: 1,
    loc: 213, // –ú–æ—Å–∫–≤–∞
    lr: 'lang_ru'
  });
  
  console.log('\n' + '='.repeat(80) + '\n');
  
  // –¢–µ—Å—Ç Google
  await testSearch(query, 'GOOGLE', {
    groupby: 10,
    page: 1,  // –ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤ Google —Å 1
    filter: 1,
    country: 2008, // –†–æ—Å—Å–∏—è
    domain: 10,    // google.ru
    lr: 'lang_ru'
  });
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error);
